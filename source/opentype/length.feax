@Cons = [@cno_base yya-oriya @c_base];

# The rlig feature (and the two lookups it calls) are to support positioning
# the new overline character over the eMatra (which includes other matras that
# are composed of the eMatra). The OpenType shaper reorders the eMatra glyph
# to the left of the consonant (the eMatra and the overline are stored to the
# right in the data) but does not reorder the overline. The code below swaps
# the position of the overline character and consonant so that the overline
# is to the immediate right of the eMatra (left of consonant), and thus can be
# positioned on the eMatra using a GPOS rule later.
lookup Cons2OverlineSub {
	sub @Cons by overline-oriya @Cons;
} Cons2OverlineSub;

lookup Overline2ConsSub {
	sub @Cons overline-oriya by @Cons;
} Overline2ConsSub;

lookup OverlineSwap {
	sub eMatra-oriya @Cons' lookup Cons2OverlineSub overline-oriya' lookup Overline2ConsSub;
} OverlineSwap;

# The ORIYA SIGN DOT ABOVE (currently /dotabovecomb at U+0307)
# needs the same swap as the overline glyph.
lookup Cons2DotAboveSub {
	sub @Cons by dotabovecomb @Cons;
} Cons2DotAboveSub;

lookup DotAbove2ConsSub {
  lookupflag UseMarkFilteringSet [dotabovecomb];
	sub @Cons dotabovecomb by @Cons;
} DotAbove2ConsSub;

lookup DotAboveSwap {
  lookupflag UseMarkFilteringSet [overline-oriya dotabovecomb];
	sub eMatra-oriya @Cons' lookup Cons2DotAboveSub @Cons' dotabovecomb' lookup DotAbove2ConsSub;
	sub eMatra-oriya @Cons' lookup Cons2DotAboveSub dotabovecomb' lookup DotAbove2ConsSub;
} DotAboveSwap;

feature rlig {
	lookup OverlineSwap;
	lookup DotAboveSwap;
} rlig;
